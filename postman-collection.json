{
    "info": {
        "name": "SBA 318: API Testing Collection",
        "description": "SBA 318: A collection to test API endpoints.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "Get Assignments",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/assignments",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignments"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is an array\", function () {",
                            "    pm.response.to.be.json;",
                            "    pm.response.to.have.jsonBody();",
                            "    pm.expect(pm.response.json()).to.be.an('array');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Assignment",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/assignments",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignments"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": \"New Assignment\",\n    \"due_at\": \"2024-02-15\",\n    \"points_possible\": 75\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains new assignment with generated id\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.be.an('array');",
                            "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                            "    var newAssignment = jsonData.find(a => a.name === \"New Assignment\");",
                            "    pm.expect(newAssignment).to.not.be.undefined;",
                            "    pm.expect(newAssignment).to.have.property('id');",
                            "    pm.expect(newAssignment.name).to.eql(\"New Assignment\");",
                            "    pm.expect(newAssignment.due_at).to.eql(\"2024-02-15\");",
                            "    pm.expect(newAssignment.points_possible).to.eql(75);",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Assignment (Negative Test)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/assignments",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "assignments"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": \"Incomplete Assignment\"\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 400\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Error message is 'Insufficient Data'\", function () {",
                            "    var responseJson = pm.response.json();",
                            "    pm.expect(responseJson).to.have.property('error', 'Insufficient Data');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get Courses",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/courses",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "courses"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is an array of courses\", function () {",
                            "    pm.response.to.be.json;",
                            "    pm.response.to.have.jsonBody();",
                            "    pm.expect(pm.response.json()).to.be.an('array');",
                            "    var courses = pm.response.json();",
                            "    courses.forEach(course => {",
                            "        pm.expect(course).to.have.property('id');",
                            "        pm.expect(course).to.have.property('name');",
                            "    });",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Course",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/courses",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "courses"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": \"New Course\"\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains new course\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.be.an('array');",
                            "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                            "    var newCourse = jsonData.find(c => c.name === \"New Course\");",
                            "    pm.expect(newCourse).to.not.be.undefined;",
                            "    pm.expect(newCourse).to.have.property('id');",
                            "    pm.expect(newCourse.name).to.eql(\"New Course\");",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Course (Negative Test)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/courses",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "courses"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    // Missing 'name' field\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 400\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Error message is 'Insufficient Data'\", function () {",
                            "    var responseJson = pm.response.json();",
                            "    pm.expect(responseJson).to.have.property('error', 'Insufficient Data');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get Learners",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/learners",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "learners"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is an array of learners\", function () {",
                            "    pm.response.to.be.json;",
                            "    pm.response.to.have.jsonBody();",
                            "    pm.expect(pm.response.json()).to.be.an('array');",
                            "    var learners = pm.response.json();",
                            "    learners.forEach(learner => {",
                            "        pm.expect(learner).to.have.property('id');",
                            "        pm.expect(learner).to.have.property('name');",
                            "        pm.expect(learner.name).to.have.property('first_name');",
                            "        pm.expect(learner.name).to.have.property('last_name');",
                            "        pm.expect(learner).to.have.property('email');",
                            "    });",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Learner",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/learners",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "learners"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": {\n        \"first_name\": \"John\",\n        \"last_name\": \"Doe\"\n    },\n    \"email\": \"john.doe@example.com\"\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"Response contains new learner\", function () {",
                            "    var jsonData = pm.response.json();",
                            "    pm.expect(jsonData).to.be.an('array');",
                            "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                            "    var newLearner = jsonData.find(l => l.email === \"john.doe@example.com\");",
                            "    pm.expect(newLearner).to.not.be.undefined;",
                            "    pm.expect(newLearner).to.have.property('id');",
                            "    pm.expect(newLearner.name.first_name).to.eql(\"John\");",
                            "    pm.expect(newLearner.name.last_name).to.eql(\"Doe\");",
                            "    pm.expect(newLearner.email).to.eql(\"john.doe@example.com\");",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Learner (Negative Test - Missing Data)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/learners",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "learners"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": {\n        \"first_name\": \"John\"\n    },\n    \"email\": \"john.doe@example.com\"\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 400\", function () {",
                            "    pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"Error message is 'Insufficient Data'\", function () {",
                            "    var responseJson = pm.response.json();",
                            "    pm.expect(responseJson).to.have.property('error', 'Insufficient Data');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Create Learner (Negative Test - Email Exists)",
            "request": {
                "method": "POST",
                "header": [
                    {
                        "key": "Content-Type",
                        "value": "application/json"
                    }
                ],
                "url": {
                    "raw": "{{baseUrl}}/learners",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "learners"
                    ]
                },
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": {\n        \"first_name\": \"Jane\",\n        \"last_name\": \"Doe\"\n    },\n    \"email\": \"john.doe@example.com\"\n}"
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 409\", function () {",
                            "    pm.response.to.have.status(409);",
                            "});",
                            "",
                            "pm.test(\"Error message is 'Email Already Registered'\", function () {",
                            "    var responseJson = pm.response.json();",
                            "    pm.expect(responseJson).to.have.property('error', 'Email Already Registered');",
                            "});"
                        ]
                    }
                }
            ]
        },
        {
            "name": "Get Submissions",
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/submissions",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "submissions"
                    ]
                }
            },
            "response": [],
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "type": "text/javascript",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"Response is an array of submissions\", function () {",
                            "    pm.response.to.be.json;",
                            "    pm.response.to.have.jsonBody();",
                            "    pm.expect(pm.response.json()).to.be.an('array');",
                            "    var submissions = pm.response.json();",
                            "    submissions.forEach(submission => {",
                            "        pm.expect(submission).to.have.property('learner_id');",
                            "        pm.expect(submission).to.have.property('assignment_id');",
                            "        pm.expect(submission).to.have.property('submission');",
                            "        pm.expect(submission.submission).to.have.property('submitted_at');",
                            "        pm.expect(submission.submission).to.have.property('score');",
                            "    });",
                            "});"
                        ]
                    }
                }
            ]
        }
    ]
}
